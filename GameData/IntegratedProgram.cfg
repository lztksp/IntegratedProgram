// Unmanned pods
@PART[*]:HAS[@MODULE[ModuleCommand]:HAS[#minimumCrew]]:Final
{
	// Edit minimumCrew to 0 
	@MODULE[ModuleCommand]
	{
		@minimumCrew = 0
	}
}

// Integrated Science
@PART[*]:HAS[@MODULE[ModuleCommand]]
{
	// Barometer data
	MODULE
	{
		name = ModuleScienceExperiment
		experimentID = barometerScan
		experimentActionName = #autoLOC_502065 //#autoLOC_502065 = Log Pressure Data
		resetActionName = #autoLOC_502064 //#autoLOC_502064 = Delete Data
		useStaging = False
		useActionGroups = True
		hideUIwhenUnavailable = False
		xmitDataScalar = 0.5
		dataIsCollectable = True
		collectActionName = #autoLOC_238018 //#autoLOC_238018 = Take Data
		interactionRange = 1.5
		rerunnable = True
		usageReqMaskInternal = 1
		usageReqMaskExternal = 8
	}

	// Temperature data
	MODULE
	{
		name = ModuleScienceExperiment
		experimentID = temperatureScan
		experimentActionName = #autoLOC_502067 //#autoLOC_502067 = Log Temperature
		resetActionName = #autoLOC_502064 //#autoLOC_502064 = Delete Data
		useStaging = False
		useActionGroups = True
		hideUIwhenUnavailable = False
		xmitDataScalar = 0.5
		dataIsCollectable = True
		collectActionName = #autoLOC_238018 //#autoLOC_238018 = Take Data
		interactionRange = 1.5
		rerunnable = True
		usageReqMaskInternal = 1
		usageReqMaskExternal = 8
	}

	%MODULE[ModuleScienceContainer]
	{
		%reviewActionName = #autoLOC_502201 //#autoLOC_502201 = Review Stored Data
		%storeActionName = #autoLOC_502202 //#autoLOC_502202 = Store Experiments
		%evaOnlyStorage = True // i.e. can nearby regular vessels also do this, or EVA only
		%storageRange = 1.8
		%canBeTransferredToInVessel = True
		%canTransferInVessel = True
	}
}


// Remotetech integration
// This adds an omni antenna to every command module 
@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[RemoteTech]:Final
{
	%MODULE[ModuleRTAntennaPassive]
	{
		// Omni antenna based on the DP-10 
		%TechRequired = unmannedTech
		%OmniRange = 500000
		
		%TRANSMITTER 
		{
			%PacketInterval = 0.3
			%PacketSize = 2
			%PacketResourceCost = 15.0
		}
	}
	
	// Adds a processing unit (RemoteTech Flight Computer)
	%MODULE[ModuleSPU] {}	
}

// KER Integration
@PART[*]:HAS[@MODULE[ModuleCommand],!MODULE[FlightEngineerModule]]:NEEDS[KerbalEngineer]:Final
{
	MODULE
	{
		name = FlightEngineerModule
	}
}

// kOS Integration
@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[kOS]:Final
{
	%MODULE[kOSProcessor]
	{
		%diskSpace = 10000000
	}
}

// MechJeb Integration
@PART[*]:HAS[@MODULE[ModuleCommand]]:NEEDS[MechJeb2]:Final
{
	%MODULE[MechJebCore]
	{
		MechJebLocalSettings
		{
			MechJebModuleCustomWindowEditor { unlockTechs = flightControl }
			MechJebModuleSmartASS { unlockTechs = flightControl }
			MechJebModuleManeuverPlanner { unlockTechs = advFlightControl }
			MechJebModuleNodeEditor { unlockTechs = advFlightControl }
			MechJebModuleTranslatron { unlockTechs = advFlightControl }
			MechJebModuleWarpHelper { unlockTechs = advFlightControl }
			MechJebModuleAttitudeAdjustment { unlockTechs = advFlightControl }
			MechJebModuleThrustWindow { unlockTechs = advFlightControl }
			MechJebModuleRCSBalancerWindow { unlockTechs = advFlightControl }
			MechJebModuleRoverWindow { unlockTechs = fieldScience }
			MechJebModuleAscentGuidance { unlockTechs = unmannedTech }
			MechJebModuleLandingGuidance { unlockTechs = unmannedTech }
			MechJebModuleSpaceplaneGuidance { unlockTechs = unmannedTech }
			MechJebModuleDockingGuidance { unlockTechs = advUnmanned }
			MechJebModuleRendezvousAutopilotWindow { unlockTechs = advUnmanned }
			MechJebModuleRendezvousGuidance { unlockTechs = advUnmanned }
		}
	}
}
